<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrderedLinqOps</name>
    </assembly>
    <members>
        <member name="T:OrderedLinqOps.OrderedLinqOperators">
            <summary>
            Implements the OrderedLinq extension methods
            </summary>
        </member>
        <member name="M:OrderedLinqOps.OrderedLinqOperators.OrderedGroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Groups the elements of an ordered sequence according to a specified key selector function, using a specified optional comparer.
            </summary>
            <remarks>
            The operation works in a "streaming" way, meaning the input is not buffered, but passed along as soon as possible.
            The ordering of the input is assumed to be compatible with the provided comparer. An exception will be thrown during the iteration if this assumption is not upheld.
            </remarks>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A collection whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">A "sorting" comparer to compare keys with.</param>
            <returns>A collection where each object contains a sequence of objects and a key.</returns>
            <exception cref="T:System.ArgumentException">The input sequences is out of order.</exception>
        </member>
        <member name="M:OrderedLinqOps.OrderedLinqOperators.OrderedGroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Groups the elements of an ordered sequence according to a specified key selector function, using a specified optional comparer.
            The elements of each group are projected by using a specified function.
            The keys are compared by using a specified optional comparer.
            </summary>
            <remarks>
            The operation works in a "streaming" way, meaning the input is not buffered, but passed along as soon as possible.
            The ordering of the input is assumed to be compatible with the provided comparer. An exception will be thrown during the iteration if this assumption is not upheld.
            </remarks>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <typeparam name="TElement">The type of the elements in each group.</typeparam>
            <param name="source">A collection whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to extract the key for each element.</param>
            <param name="comparer">A "sorting" comparer to compare keys with.</param>
            <returns>A collection where each object contains a sequence of objects and a key.</returns>
            <exception cref="T:System.ArgumentException">The input sequences is out of order.</exception>
        </member>
        <member name="M:OrderedLinqOps.OrderedLinqOperators.OrderedGroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IReadOnlyCollection{``0},``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Groups the elements of an ordered sequence according to a specified key selector function and creates a result value from each group and its key. 
            The keys are compared by using a specified optional comparer.
            </summary>
            <remarks>
            The operation works in a "streaming" way, meaning the input is not buffered, but passed along as soon as possible.
            The ordering of the input is assumed to be compatible with the provided comparer. An exception will be thrown during the iteration if this assumption is not upheld.
            </remarks>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <typeparam name="TResult">The type of the result value returned by resultSelector.</typeparam>
            <param name="source">A collection whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="resultSelector">A function to map each source element to an element in a group.</param>
            <param name="comparer">A "sorting" comparer to compare keys with.</param>
            <returns>A collection of elements of type TResult where each element represents a projection over a group and its key.</returns>
            <exception cref="T:System.ArgumentException">The input sequences is out of order.</exception>
        </member>
        <member name="M:OrderedLinqOps.OrderedLinqOperators.OrderedGroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IReadOnlyCollection{``2},``3},System.Collections.Generic.IComparer{``1})">
            <summary>
            Groups the elements of an ordered sequence according to a specified key selector function and creates a result value from each group and its key.
            The elements of each group are projected by using a specified function.
            The keys are compared by using a specified optional comparer.
            </summary>
            <remarks>
            The operation works in a "streaming" way, meaning the input is not buffered, but passed along as soon as possible.
            The ordering of the input is assumed to be compatible with the provided comparer. An exception will be thrown during the iteration if this assumption is not upheld.
            </remarks>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <typeparam name="TElement">The type of the elements in each group.</typeparam>
            <typeparam name="TResult">The type of the result value returned by resultSelector.</typeparam>
            <param name="source">A collection whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to extract the key for each element.</param>
            <param name="resultSelector">A function to map each source element to an element in a group.</param>
            <param name="comparer">A "sorting" comparer to compare keys with.</param>
            <returns>A collection of elements of type TResult where each element represents a projection over a group and its key.</returns>
            <exception cref="T:System.ArgumentException">The input sequences is out of order.</exception>
        </member>
        <member name="M:OrderedLinqOps.OrderedLinqOperators.OrderedGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IReadOnlyCollection{``1},``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Correlates the elements of two ordered sequences based on matching keys and groups the results, using a specified optional comparer.
            Yields a result for each element of the outer sequence.
            </summary>
            <remarks>
            The operation works in a "streaming" way, meaning the input is not buffered, but passed along as soon as possible.
            The ordering of the inputs is assumed to be compatible with the provided comparer. An exception will be thrown during the iteration if this assumption is not upheld.
            </remarks>
            <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first sequence to join.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <param name="comparer">A "sorting" comparer to compare keys with.</param>
            <returns>A collection that has elements of type TResult that are obtained by performing a grouped join on two sequences.</returns>
            <exception cref="T:System.ArgumentException">Any of the input sequences is out of order.</exception>
        </member>
        <member name="M:OrderedLinqOps.OrderedLinqOperators.OrderedJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Correlates the elements of two ordered sequences based on matching keys, using a specified optional comparer.
            </summary>
            <remarks>
            The operation works in a "streaming" way, meaning the input is not buffered, but passed along as soon as possible.
            The ordering of the inputs is assumed to be compatible with the provided comparer. An exception will be thrown during the iteration if this assumption is not upheld.
            </remarks>
            <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first sequence to join.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <param name="comparer">A "sorting" comparer to compare keys with.</param>
            <returns>A collection that has elements of type TResult that are obtained by performing an inner join on two sequences.</returns>
            <exception cref="T:System.ArgumentException">Any of the input sequences is out of order.</exception>
        </member>
        <member name="M:OrderedLinqOps.OrderedLinqOperators.OrderedSelect``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``0,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Projects each element of an ordered sequence into a new form, while checking the correctness of the ordering.
            If you don't need the order-checking, use LINQ Select.
            </summary>
            <remarks>
            The operation works in a "streaming" way, meaning the input is not buffered, but passed along as soon as possible.
            The ordering of the input is assumed to be compatible with the provided comparer. An exception will be thrown during the iteration if this assumption is not upheld.
            </remarks>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <typeparam name="TResult">The type of the result value returned by resultSelector.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="resultSelector">A transform function to apply to each element.</param>
            <param name="comparer">A "sorting" comparer to compare keys with.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the transform function on each element of source.</returns>
        </member>
    </members>
</doc>
